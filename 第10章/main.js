//10.1 正则表达式的定义
var pattern = /s$/;
function getRE() {
    var re = /[a-z]/;
    re.foo = "bar";
    return re;
}
var re1 = getRE(),
    re2 = getRE();
console.log(re1 == re2);
var str = "Hello World!";
var str1 = "s0t01r012i0123n01234g012345";
console.log(str.search(/e/));
console.log(str1.search(/\d{3}/));

//10.1.3 重复
/*
{n, m} //匹配前一项至少n次，但不能超过m次
{n,}    //匹配前一项至少n次
{n}     //匹配前一项n次
?       //匹配前一项零次或一次
+       //匹配前一项一次或多次
*       //匹配前一项零次或多次

/\d{2，4}/       //匹配2～4个数字
/\w{3}\d?/      //匹配3个单词和一个可选的数字
/\s+java\s+/    //匹配前后带一个或多个空格的字符串"java"
/[^(]*!/         //匹配零个或多个非左括号的字符
*/

//注意：正则表达式/a*/实际上与字符串"bbbb"匹配，因为这个字符串含有0个a。

//非贪婪的重复
//正则表达式后面加一个问号即可，例如/a+?/尽可能少地匹配，例如"aaa"，只能匹配第一个a
console.log("aaa".search(/a+?/));

//10.1.4 选择、分组和引用
//选择符"|"，若左边的选择项匹配，就忽略右边的匹配项，即使它产生更好的匹配。因此，当正则表达式/a|ab/匹配字符串"ab"时，他只能匹配第一个字符
